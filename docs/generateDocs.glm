import os

const footer = [
    '',
`_This document uses documentation from [go](https://github.com/golang/go), which
is licensed under the BSD-3-Clause license._`
]

fn docs(name) {
    let result = []
    let f = os.open(name)
    try {
        let lines = f.readLines()
        let isDoc = false
        for ln in lines {
            ln = ln.trim('\t')
            if isDoc {
                if ln.hasPrefix('*/') {
                    isDoc = false
                } else {
                    result.add(ln)
                }
            } else {
                if ln.hasPrefix('/*doc') {
                    isDoc = true
                }
            }
        }

    } finally {
        f.close()
    }
    return result
}

fn main(args) {

    let types = []

    types.addAll(docs('../core/value.go'))

    types.addAll(['# Basic Types', ''])
    types.addAll(docs('../core/null.go'))
    types.addAll(docs('../core/bool.go'))
    types.addAll(docs('../core/int.go'))
    types.addAll(docs('../core/float.go'))
    types.addAll(docs('../core/str.go'))

    types.addAll(['# Composite Types', ''])
    types.addAll(docs('../core/list.go'))
    types.addAll(docs('../core/tuple.go'))
    types.addAll(docs('../core/range.go'))
    types.addAll(docs('../core/dict.go'))
    types.addAll(docs('../core/set.go'))

    types.addAll(['# Other Types', ''])
    types.addAll(docs('../core/bytecode/func.go'))
    types.addAll(docs('../core/channel.go'))

    types.addAll(footer)

    let f = os.create('types.md')
    try {
        f.writeLines(types)
    } finally {
        f.close()
    }
}

