
-----------------------------------------------------------
Things to do before Golem is releasable
-----------------------------------------------------------

make the semicolons optional
multiline strings
string unicode escape -- JSON style

create an example separate repo to demonstrate how to embed/sandbox.

complete all documentation:
    should we use the wiki? ghpages?
    tutorial
    language reference
        BNF
        builtin functions
        intrinsic functions
    topics:
        sandboxing
        concurrency
        type system
        immutability
        operator overloading
        standard library, or the lack thereof
            go has poor support for pluggable modules
        internals

improve interpreter test suite: large scale testing, concurrency, etc

-----------------------------------------------------------
Improvements to library of intrinsic functions
-----------------------------------------------------------

str:  
    toRune() // str-with-one-char
    parseInt(radix = 10),  // radix
    parseFloat(), 
    format() // variadic

int:  
    toChar() // str-with-one-char, utf8.ValidRune()
    toStr(radix = 10)

float:
    round(), ceil(), floor(), etc

list, str, range, dict:
    all need elems() to iterate over (i, v)
    dict elems(): (i, k, v) 
    sort()
    clone()
    toDict()
    toSet()
    toTuple()

dict: 
    fromStruct(), toStruct(f = null)
    toList()
    clone()

set: 
    toList()
    clone()

range: 
    from(), to(), skip()

tuple: 
    toList()

-----------------------------------------------------------
Improvements to the core language
-----------------------------------------------------------

allow for user defined properties

write Control Flow Graph: 
    use the POP opcode to keep stack size down
    find unreachable statements

treeDict(), treeSet()

optional formal parameters in functions
variadic functions
keyword args 

multiline strings -- backticks
interpolated strings: $"123$foo456"

concurrency improvements:
    chan: range, close(), isOpen()
    select waitGroup 
    sync{}

break, continue to label: for, while
    note that to avoid linefeed ambiguity, we will have to include syntax 
    between break (or continue) and the label, e.g. :
        break: foo
        break(foo)
        break { foo }
        break -> foo
        break #foo

'like' keyword for comparing structs

destructing tuple: assignment, lambda

blank id '_': for, assignment, like

$eq, $hash:  allow composite keys in hashMap
$str: allow for custom str() 
$cmp: allow for custom comparable rules
$index, $slice: allow a struct to behave like a list
$add, $sub, etc:  operator overloading 

annotations: like Java and Python

stream() function on lists, a la Java 8

check for recursive data structures in String() functions

improve error messages

check for duplicate cases in switch

Fix implementation of intrinsics so it doesn't create a function 
all the time.  This may not be possible.

try with resources

documentation generator

modules:
    json, xml, io, sys, regex, net, http, time, bytes, random, yaml, etc

bytecode modules:
    more than one file
    source name in line number table

