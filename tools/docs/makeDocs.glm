// Copyright 2018 The Golem Language Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

import io
import os
import path

const core = [
    'null', 
    'bool', 
    'int', 
    'float', 
    'str',
    'list', 
    'range', 
    'tuple', 
    'dict', 
    'set', 
    'struct',
    'func', 
    'chan',
    'builtins'
]

fn readLines(path) {
    // TODO with
    let f
    try {
        f = os.open(path)
        return f.readLines()
    } finally {
        f.close()
    }
}

fn writeLines(path, lines) {
    // TODO with
    let f
    try {
        f = os.create(path)
        f.writeLines(lines)
    } finally {
        f.close()
    }
}

//---------------------------------------------------------------
// markdown
//---------------------------------------------------------------

fn findDocs(lines) {

    let docs = [], isDoc = false, indent

    for ln in lines {
        ln = ln.replace('\t', '    ')
        if isDoc {
            if ln.trim(' ').hasPrefix('*/') {
                isDoc = false
            } else {
                docs.add(ln[indent:])
            }
        } else {
            if ln.trim(' ').hasPrefix('/*doc') {
                isDoc = true
                indent = ln.index('/*doc')
            }
        }
    }
    return docs
}


fn createMarkdown() {

    for c in core {
        let readc = c
        if c == 'func' {
            readc = 'bytecode/func'
        }
        let lines = readLines('../../core/' + readc + '.go')
        writeLines('md/core/' + c + '.md', findDocs(lines))
    }

    path.filepath.walk('../../lib', fn(p, info) {
        if !info.isDir() && path.filepath.ext(info.name()) == '.go' {
            if p != '../../lib/lib.go' {
                let lines = readLines(p)
                let a = len('../../lib/')
                let b = p.lastIndex('/')
                let md = p[a:b].replace('/', '')
                writeLines('md/lib/' + md + '.md', findDocs(lines))
            }
        }
    })
}

//---------------------------------------------------------------
// html
//---------------------------------------------------------------

const header = io.ioutil.readFileString('html/header.html')
const footer = io.ioutil.readFileString('html/footer.html')
const play   = io.ioutil.readFileString('html/play.html')

const preBegin = '<pre><code>'
const preEnd   = '</code></pre>'

let playCounter = 0

fn wrapCode(code) {
    const counter = playCounter++
    const rows = len(code.split('\n'))

    return play
        .replace('${code}', code)
        .replace('${counter}', str(counter))
        .replace('${rows}', str(rows))
}

fn wrapHtml(name, title, codeWrap = true) {

    let h = header.replace('${title}', title)

    let body = io.ioutil.readFileString(name)

    if codeWrap {
        let a = body.index(preBegin)
        while a != -1 {
            let b = a + len(preBegin)
            let c = body.index(preEnd)
            let d = c + len(preEnd)
            
            body = body[:a] + wrapCode(body[b:c]) + body[d:]

            a = body.index(preBegin)
        }
    }

    io.ioutil.writeFileString(name, [h, body, footer].join('\n'))
}

const docsDir = '../../docs/'

fn createHtml() {

    for f in core {
        let p = docsDir + f + '.html' 
        os.exec.runCommand('pandoc', 'md/core/' + f + '.md', '-o', p)
        wrapHtml(p, 'Golem Reference')
    }
    
    let lib = io.ioutil.readDir('md/lib')
    for f in lib {
        let p = docsDir + 'lib_' + f.name()[:-3] + '.html' 
        os.exec.runCommand('pandoc', 'md/lib/' + f.name(), '-o', p)
        wrapHtml(p, 'Golem Reference', false)
    }

    os.exec.runCommand('pandoc', 'md/index.md',      '-o', docsDir + 'index.html')
    os.exec.runCommand('pandoc', 'md/tour.md',       '-o', docsDir + 'tour.html')
    os.exec.runCommand('pandoc', 'md/reference.md',  '-o', docsDir + 'reference.html')
    os.exec.runCommand('pandoc', 'md/syntax.md',     '-o', docsDir + 'syntax.html')
    os.exec.runCommand('pandoc', 'md/interfaces.md', '-o', docsDir + 'interfaces.html')
    os.exec.runCommand('pandoc', 'md/embedding.md',  '-o', docsDir + 'embedding.html')

    wrapHtml(docsDir + 'index.html', 'The Golem Programming Language')
    wrapHtml(docsDir + 'tour.html', 'Golem Tour')
    wrapHtml(docsDir + 'reference.html', 'Golem Reference')
    wrapHtml(docsDir + 'syntax.html', 'Golem Reference')
    wrapHtml(docsDir + 'interfaces.html', 'Golem Reference')
    wrapHtml(docsDir + 'embedding.html', 'Golem Reference')
}

//---------------------------------------------------------------
// main
//---------------------------------------------------------------

createMarkdown()

createHtml()
