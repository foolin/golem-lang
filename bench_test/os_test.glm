import os

fn testExit() {
    try {
        os.exit('foo')
        assert(false)
    } catch e {
        assert(e.kind == 'TypeMismatch')
        assert(e.msg == 'Expected Int')
    }

    try {
        os.exit(1, 2)
        assert(false)
    } catch e {
        assert(e.kind == 'ArityMismatch')
        assert(e.msg == 'Expected at most 1 params, got 2')
    }
}

fn testReadLines() {
    try {
        let file = os.open('./bench_test/data/no_such_file.txt')
        assert(false)
    } catch e {
        assert(e.kind == 'OsError')
        assert(e.msg == 'open ./bench_test/data/no_such_file.txt: no such file or directory')
    }

    let file = os.open('./bench_test/data/lines.txt')
    let lines = file.readLines()
    assert(['abc', 'def'] == lines)
    file.close()

    assert(['abc', 'def'] == os.open('./bench_test/data/lines.txt').readLines())
}

fn testStat() {
    let info = os.stat('./bench_test/data/lines.txt')
    assert(struct { size: 8, isDir: false, name: 'lines.txt', mode: 436 } == info)
}

fn main(args) {
    testExit()
    testReadLines()
    testStat()
    os.exit(0)
}


