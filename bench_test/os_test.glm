// Copyright 2018 The Golem Language Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

import os

fn fail(func, err) {
    try {
        func()
        assert(false)
    } catch e {
        //println("BenchTestError: " + err + " != " + e.error)
        assert(err == e.error)
    }
}

fn testExit() {
    fail(|| => os.exit('foo'), 'TypeMismatch: Expected Int, not Str')
    fail(|| => os.exit(1, 2), 'ArityMismatch: Expected 1 params, got 2')
}

//fn testReadLines() {
//    try {
//        let file = os.open('data/no_such_file.txt')
//        assert(false)
//    } catch e {
//        assert(e.kind == 'OsError')
//        assert(e.msg == 'open data/no_such_file.txt: no such file or directory')
//    }
//
//    let file = os.open('data/lines.txt')
//    let lines = file.readLines()
//    assert(['abc', 'def'] == lines)
//    file.close()
//
//    assert(['abc', 'def'] == os.open('data/lines.txt').readLines())
//}
//
//fn testStat() {
//    let info = os.stat('data/lines.txt')
//    assert(struct { size: 8, isDir: false, name: 'lines.txt', mode: 420 } == info)
//}

fn main(args) {
    testExit()
//    testReadLines()
//    testStat()
    os.exit(0)
}


